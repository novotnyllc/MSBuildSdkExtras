<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target
    Name="_FixupOutputPathChecks"
    BeforeTargets="_CheckForInvalidConfigurationAndPlatform">
    <PropertyGroup>
      <EnableBuildPathMismatchWarning>true</EnableBuildPathMismatchWarning>
      <EnableBaseIntermediateOutputPathMismatchWarning>false</EnableBaseIntermediateOutputPathMismatchWarning>
    </PropertyGroup>
  </Target>

  <Target
    Name="_CheckForBuildPathMismatch"
    AfterTargets="_FixupOutputPathChecks;_CheckForInvalidConfigurationAndPlatform"
    BeforeTargets="$(BuildDependsOn);Build;$(RebuildDependsOn);Rebuild;$(CleanDependsOn);Clean">

    <!--
      Log a warning if:
        1. $(EnableBuildPathMismatchWarning) is 'true'
        2. $(BuildPath) was set in the body of a project after its default value was set in Microsoft.Common.props
        3. $(BuildPath) is not the same as $(MSBuildProjectExtensionsPath)

      Similar to the error above, there are cases when users set $(BuildPath) in the body of their project and things build but only by coincidence.
      MSBuild does not know if $(BuildPath) changing would cause problems so tools like NuGet must set $(EnableBuildPathMismatchWarning)
      to 'true'.
    -->
    <Warning Condition="'$(EnableBuildPathMismatchWarning)' == 'true' AND '$(_InitialBuildPath)' != '$(BuildPath)' AND '$(BuildPath)' != '$(MSBuildProjectExtensionsPath)'"
      Code="MSB3539"
      Text="The value of the property &quot;BuildPath&quot; was modified after it was used by MSBuild which can lead to unexpected build results. Tools such as NuGet will write outputs to the path specified by the &quot;MSBuildProjectExtensionsPath&quot; instead. To set this property, you must do so before Microsoft.Common.props is imported, for example by using Directory.Build.props.  For more information, please visit https://go.microsoft.com/fwlink/?linkid=869650"
    />
  </Target>

</Project>