<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DefaultLanguage Condition="'$(DefaultLanguage)' == ''">en-US</DefaultLanguage>
    <_ExtrasVisualStudioVersion>$(VisualStudioVersion)</_ExtrasVisualStudioVersion>
    <_ExtrasVisualStudioVersion Condition="'$(_ExtrasVisualStudioVersion)' == '' or '$(_ExtrasVisualStudioVersion)' &lt; '14.0' ">15.0</_ExtrasVisualStudioVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
    <_ExtrasLanguageName>CSharp</_ExtrasLanguageName>
    <_ExtrasDefaultLangSourceExt>.cs</_ExtrasDefaultLangSourceExt>
  </PropertyGroup>

  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.vbproj'">
    <_ExtrasLanguageName>VisualBasic</_ExtrasLanguageName>
    <_ExtrasDefaultLangSourceExt>.vb</_ExtrasDefaultLangSourceExt>
  </PropertyGroup>

  <!-- Split $(TargetFramework) (e.g. net45) into short identifier and short version (e.g. 'net' and '45'). -->
  <PropertyGroup Condition="'$(TargetFramework)' != '' and !$(TargetFramework.Contains(',')) and !$(TargetFramework.Contains('+'))">
    <_ExtrasShortFrameworkIdentifier>$(TargetFramework.TrimEnd('.0123456789'))</_ExtrasShortFrameworkIdentifier>
    <_ExtrasShortFrameworkVersion>$(TargetFramework.Substring($(_ExtrasShortFrameworkIdentifier.Length)))</_ExtrasShortFrameworkVersion>
  </PropertyGroup>

  <!-- Map short name to long name. See earlier comment for example of how to work with identifiers that are not recognized here. -->
  <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == ''">

    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'sl'">Silverlight</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'wp'">WindowsPhone</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'wpa'">WindowsPhoneApp</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'win'">.NETCore</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'uap'">.NETCore</TargetFrameworkIdentifier>

    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarinios'">Xamarin.iOS</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarin.ios'">Xamarin.iOS</TargetFrameworkIdentifier>

    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'monoandroid'">MonoAndroid</TargetFrameworkIdentifier>

    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarintvos'">Xamarin.TVOS</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarin.tvos'">Xamarin.TVOS</TargetFrameworkIdentifier>

    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarinwatchos'">Xamarin.WatchOS</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarin.watchos'">Xamarin.WatchOS</TargetFrameworkIdentifier>

    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarinmac'">Xamarin.Mac</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'xamarin.mac'">Xamarin.Mac</TargetFrameworkIdentifier>

  </PropertyGroup>

  <!-- Handle legacy PCL profiles  -->
  <PropertyGroup Condition="'$(TargetFramework)' != '' and $(TargetFramework.ToLowerInvariant().Contains('portable-'))" >
    <_ExtrasShortFrameworkIdentifier>portable</_ExtrasShortFrameworkIdentifier>
    <_ExtrasPortableTfms>$(TargetFramework.Substring(9).ToLowerInvariant())</_ExtrasPortableTfms>
    <_ExtrasPortableTfmCount>$(_ExtrasPortableTfms.Split('+').Length)</_ExtrasPortableTfmCount>
    <!-- Pre and post-pend the separator char + to the tfm list after counting so we can easily do a Contains() search -->
    <_ExtrasPortableTfms>+$(_ExtrasPortableTfms)+</_ExtrasPortableTfms>
    <TargetFrameworkIdentifier>.NETPortable</TargetFrameworkIdentifier>
  </PropertyGroup>

  <!-- Versions with dots are taken as is and just given leading 'v'. -->
  <PropertyGroup Condition="'$(TargetFrameworkVersion)' == '' and '$(_ExtrasShortFrameworkVersion)' != '' and $(_ExtrasShortFrameworkVersion.Contains('.'))">
    <TargetFrameworkVersion>v$(_ExtrasShortFrameworkVersion)</TargetFrameworkVersion>
  </PropertyGroup>

  <!-- Versions with no dots and up to 3 characters get leading 'v' and implicit dots between characters. -->
  <PropertyGroup Condition="'$(TargetFrameworkVersion)' == '' and '$(_ExtrasShortFrameworkVersion)' != ''">
    <TargetFrameworkVersion Condition="$(_ExtrasShortFrameworkVersion.Length) == 1">v$(_ExtrasShortFrameworkVersion[0]).0</TargetFrameworkVersion>
    <TargetFrameworkVersion Condition="$(_ExtrasShortFrameworkVersion.Length) == 2">v$(_ExtrasShortFrameworkVersion[0]).$(_ExtrasShortFrameworkVersion[1])</TargetFrameworkVersion>
    <TargetFrameworkVersion Condition="$(_ExtrasShortFrameworkVersion.Length) == 3">v$(_ExtrasShortFrameworkVersion[0]).$(_ExtrasShortFrameworkVersion[1]).$(_ExtrasShortFrameworkVersion[2])</TargetFrameworkVersion>
  </PropertyGroup>

  <PropertyGroup>

    <Configuration Condition="'$(Configuration)'==''">Debug</Configuration>
    <Platform Condition="'$(Platform)'==''">AnyCPU</Platform>
    <PlatformName Condition="'$(PlatformName)' == ''">$(Platform)</PlatformName>

    <BaseOutputPath Condition="'$(BaseOutputPath)' == ''">bin\</BaseOutputPath>
    <BaseOutputPath Condition="!HasTrailingSlash('$(BaseOutputPath)')">$(BaseOutputPath)\</BaseOutputPath>
    <OutputPath Condition="'$(OutputPath)' == '' and '$(PlatformName)' == 'AnyCPU'">$(BaseOutputPath)$(Configuration)\</OutputPath>
    <OutputPath Condition="'$(OutputPath)' == '' and '$(PlatformName)' != 'AnyCPU'">$(BaseOutputPath)$(PlatformName)\$(Configuration)\</OutputPath>
    <OutputPath Condition="!HasTrailingSlash('$(OutputPath)')">$(OutputPath)\</OutputPath>

    <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)' == ''">obj\</BaseIntermediateOutputPath>
    <BaseIntermediateOutputPath Condition="!HasTrailingSlash('$(BaseIntermediateOutputPath)')">$(BaseIntermediateOutputPath)\</BaseIntermediateOutputPath>
    <IntermediateOutputPath Condition=" $(IntermediateOutputPath) == '' and '$(PlatformName)' == 'AnyCPU' ">$(BaseIntermediateOutputPath)$(Configuration)\</IntermediateOutputPath>
    <IntermediateOutputPath Condition=" $(IntermediateOutputPath) == '' and '$(PlatformName)' != 'AnyCPU' ">$(BaseIntermediateOutputPath)$(PlatformName)\$(Configuration)\</IntermediateOutputPath>
    <IntermediateOutputPath Condition="!HasTrailingSlash('$(IntermediateOutputPath)')">$(IntermediateOutputPath)\</IntermediateOutputPath>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)..\platforms\*.targets"/>

  <PropertyGroup Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'portable'">
    <!--Version = v0.0 https://github.com/dotnet/sdk/issues/492-->
    <NugetTargetMoniker>.NETPortable,Version=v0.0,Profile=$(TargetFrameworkProfile)</NugetTargetMoniker>
    <LanguageTargets>$(MSBuildExtensionsPath)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.$(_ExtrasLanguageName).targets</LanguageTargets>
  </PropertyGroup>

  <!-- Check to see if the Lang targets exist and if not, trigger an error on Compile -->
  <!-- We clear out the lang targets so the defaults are used for the error to show -->
  <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' != '' and !Exists('$(LanguageTargets)')">
    <_ExtrasMissingLangTargets>true</_ExtrasMissingLangTargets>
    <_ExtrasLangTargets>$(LanguageTargets)</_ExtrasLangTargets>
    <LanguageTargets></LanguageTargets>
  </PropertyGroup>

  <PropertyGroup Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'portable'">
    <DefineConstants>$(DefineConstants);$(TargetFrameworkProfile)</DefineConstants>
  </PropertyGroup>

  <Target Name="DisplayMissingLanguageTargetsError" Condition="'$(_ExtrasMissingLangTargets)' == 'true'" BeforeTargets="_CheckForUnsupportedTargetFramework">
    <Error Condition="'$(_ExtrasShortFrameworkIdentifier)' != 'portable'" Text="The specified language targets for $(TargetFramework) is missing. Ensure correct tooling is installed.\r\nMissing File: $(_ExtrasLangTargets)" />
    <Error Condition="'$(_ExtrasShortFrameworkIdentifier)' == 'portable'" Text="The specified TFM '$(TargetFramework)' is not valid. Check that it's a valid combination: http://portablelibraryprofiles.apps.stephencleary.com/"  />
  </Target>
</Project>
