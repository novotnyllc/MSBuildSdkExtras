trigger:
- master
- rel/*

pr:
- master
- rel/*

jobs:
- job: Windows
  pool:
    vmImage: windows-latest

  variables:
    BuildConfiguration: Release

  steps:
  - task: DotNetCoreCLI@2  
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
    displayName: Install NBGV tool

  - script: nbgv cloud
    displayName: Set Version

  - powershell: |
      mkdir $Env:Temp\Packages -Force
    displayName: Create packages temp folder

  - task: DotNetCoreCLI@2
    inputs:
      command: pack
      packagesToPack: Source/MSBuild.Sdk.Extras/MSBuild.Sdk.Extras.csproj
      configuration: $(BuildConfiguration)
      packDirectory: $(Build.ArtifactStagingDirectory)\Packages    
      verbosityPack: Minimal
    displayName: Build Package

  - task: PowerShell@2
    displayName: Authenticode Sign artifacts
    inputs:
      filePath: Tools\Sign-Package.ps1
    env:
      SignClientUser: $(SignClientUser)
      SignClientSecret: $(SignClientSecret)
      ArtifactDirectory: $(Build.ArtifactStagingDirectory)\Packages
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts  
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)\Packages
      artifactType: container
      artifactName: Package

- job: Windows_Tests
  pool:
    vmImage: windows-2019

  strategy:
    matrix:
      NETCORE_DEFAULT:
        BUILD_NETCORE_VERSION: ''
      NETCORE_3_1:
        BUILD_NETCORE_VERSION: '3.1.x'
      NETCORE_3_0:
        BUILD_NETCORE_VERSION: '3.0.x'
      NETCORE_2_2:
        BUILD_NETCORE_VERSION: '2.2.x'

  variables:
    BuildConfiguration: Release
    TMPDIR: $(Build.ArtifactStagingDirectory)
    DisableNerdBank: true
    PackageVersion: 42.42.42

  steps:

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: $(BUILD_NETCORE_VERSION)
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - powershell: |
      mkdir $(Build.ArtifactStagingDirectory)\Packages -Force
    displayName: Create packages temp folder

  - task: DotNetCoreCLI@2
    inputs:
      command: pack
      packagesToPack: Source/MSBuild.Sdk.Extras/MSBuild.Sdk.Extras.csproj
      configuration: $(BuildConfiguration)
      packDirectory: $(Build.ArtifactStagingDirectory)\Packages    
      verbosityPack: Minimal
    displayName: Build Package

  - task: MSBuild@1
    inputs:
      solution: '$(build.sourcesdirectory)\TestProjects\Windows-Desktop-C#\Windows-Desktop.sln'
      msbuildArguments: /r /p:SignManifests=false
      configution: $(BuildConfiguration)
    displayName: MSBuild Test Projects 1

  - task: MSBuild@1
    inputs:
      solution: '$(build.sourcesdirectory)\TestProjects\Linux-C#\netstd2Library\netstd2Library.csproj'
      msbuildArguments: /r
      configution: $(BuildConfiguration)
    displayName: MSBuild Test Projects 2

- job: Linux
  container: unoplatform/wasm-build:2.0
  pool:
    vmImage: 'ubuntu-latest'

  strategy:
    matrix:
      NETCORE_3_1:
        BUILD_NETCORE_VERSION: '3.1.x'
      NETCORE_3_0:
        BUILD_NETCORE_VERSION: '3.0.x'
      NETCORE_2_2:
        BUILD_NETCORE_VERSION: '2.2.x'

  variables:
    BuildConfiguration: Release
    TMPDIR: /tmp
    DisableNerdBank: true
    PackageVersion: 42.42.42

  steps:

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: $(BUILD_NETCORE_VERSION)
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - script: |
      mkdir $TMPDIR/Packages
    displayName: Create packages temp folder

  - task: DotNetCoreCLI@2
    inputs:
      command: pack
      packagesToPack: Source/MSBuild.Sdk.Extras/MSBuild.Sdk.Extras.csproj
      configuration: $(BuildConfiguration)
      packDirectory: $(TMPDIR)/Packages    
      verbosityPack: Minimal
    displayName: Build Package
    
  - bash: |
      dotnet build --configuration Release $(build.sourcesdirectory)/TestProjects/Linux-C#/netstd2Library/netstd2Library.csproj

    displayName: '.NET Core: .NET Std Library with unavailable platform test'
    
  - bash: |
      msbuild /r /p:Configuration=Release $(build.sourcesdirectory)/TestProjects/Linux-C#/netstd2Library/netstd2Library.csproj

    displayName: 'MSBuild: .NET Std Library with unavailable platform test'


- job: macOS

  strategy:
    matrix:
      Xamarin_Latest:
        PoolImage: macOS-latest

      Xamarin_6_6_0:
        XamarinVersion: 6_6_0
        PoolImage: macOS-10.15

      Xamarin_6_4_0:
        XamarinVersion: 6_4_0
        PoolImage: macOS-10.15

      Xamarin_5_16_0:
        XamarinVersion: 5_16_0
        PoolImage: macOS-10.14

      Xamarin_5_12_0:
        XamarinVersion: 5_12_0
        PoolImage: macOS-10.14

  pool:
    vmImage: $(PoolImage)

  variables:
    BuildConfiguration: Release
    TMPDIR: /tmp
    DisableNerdBank: true
    PackageVersion: 42.42.42

  steps:

  - bash: /bin/bash -c "sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(XamarinVersion)"
    displayName: Select Xamarin Version
    condition: and(succeeded(), ne(variables['XamarinVersion'], ''))

  - script: |
      mkdir $TMPDIR/Packages
    displayName: Create packages temp folder

  - task: DotNetCoreCLI@2
    inputs:
      command: pack
      packagesToPack: Source/MSBuild.Sdk.Extras/MSBuild.Sdk.Extras.csproj
      configuration: $(BuildConfiguration)
      packDirectory: $(TMPDIR)/Packages    
      verbosityPack: Minimal
    displayName: Build Package

  - bash: |
      dotnet build --configuration Release $(build.sourcesdirectory)/TestProjects/Linux-C#/netstd2Library/netstd2Library.csproj

    displayName: '.NET Core: .NET Std Library with unavailable platform test'
    
  - bash: |
      msbuild /r /p:Configuration=Release $(build.sourcesdirectory)/TestProjects/Linux-C#/netstd2Library/netstd2Library.csproj

    displayName: 'MSBuild: .NET Std Library with unavailable platform test'
