<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Convert 'TargetFramework' to lower case -->
    <TargetFramework>$(TargetFramework.ToLowerInvariant())</TargetFramework>
    <!-- if version-less framework-profile is specified then default to the highest supported version of that framework-profile -->
    <TargetFramework Condition="'$(TargetFramework)' == 'net-client'">net40-client</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)' == 'net-cf'">net35-cf</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)' == 'netmf'">netmf44</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)' == 'net'">net45</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)' == 'wpa'">wpa81</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)' == 'win'">win8</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)' == 'wp'">wp8</TargetFramework>
    <TargetFramework Condition="'$(TargetFramework)' == 'sl'">sl5</TargetFramework>
  </PropertyGroup>

  <!--
    Split 'TargetFramework' into short identifier, version and profile list
    For Example:
      net45 into 'net', '45'
      net40-client into 'net', '40', '+client+'
      portable45-net45+win8+wp8+wpa81 into 'portable', '45', '+net45+win8+wp8+wpa81+'
  -->
  <Choose>
    <When Condition="$(TargetFramework.Contains('-'))">
      <!-- Handle short framework ids with profiles -->
      <PropertyGroup>
        <_ShortFrameworkIdentifierWithVersion>$(TargetFramework.Split('-')[0])</_ShortFrameworkIdentifierWithVersion>
        <_ShortFrameworkIdentifier>$(_ShortFrameworkIdentifierWithVersion.TrimEnd('.0123456789'))</_ShortFrameworkIdentifier>
        <_ShortFrameworkVersion>$(_ShortFrameworkIdentifierWithVersion.Substring($(_ShortFrameworkIdentifier.Length)))</_ShortFrameworkVersion>
        <_ShortFrameworkProfile>$(TargetFramework.Split('-')[1])</_ShortFrameworkProfile>
        <_ShortFrameworkProfileCount>$(_ShortFrameworkProfile.Split('+').Length)</_ShortFrameworkProfileCount>
        <!-- Pre and post-pend the separator char + to the short-TFM list after counting so we can easily do a Contains() match -->
        <_ShortFrameworkProfile>+$(_ShortFrameworkProfile)+</_ShortFrameworkProfile>
      </PropertyGroup>
    </When>

    <Otherwise>
      <!-- Handle simple short framework ids -->
      <PropertyGroup>
        <_ShortFrameworkIdentifier>$(TargetFramework.TrimEnd('.0123456789'))</_ShortFrameworkIdentifier>
        <_ShortFrameworkVersion>$(TargetFramework.Substring($(_ShortFrameworkIdentifier.Length)))</_ShortFrameworkVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Map short name to long name. See earlier comment for example of how to work with identifiers that are not recognized here -->
  <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '' AND '$(_ShortFrameworkIdentifier)' != ''">
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'net'">.NETFramework</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netstandard'">.NETStandard</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netcoreapp'">.NETCoreApp</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'portable'">.NETPortable</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netmf'">.NETMicroFramework</TargetFrameworkIdentifier>

    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'sl'">Silverlight</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'wp'">WindowsPhone</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'wpa'">WindowsPhoneApp</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'win'">.NETCore</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'uap'">.NETCore</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'netcore'">.NETCore</TargetFrameworkIdentifier> <!-- Deprecated -->

    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monoandroid'">MonoAndroid</TargetFrameworkIdentifier> <!-- Deprecated -->
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monotouch'">MonoTouch</TargetFrameworkIdentifier> <!-- Deprecated -->
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'monomac'">MonoMac</TargetFrameworkIdentifier> <!-- Deprecated -->

    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.android' OR '$(_ShortFrameworkIdentifier)' == 'xamarinandroid'">Xamarin.Android</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.ios' OR '$(_ShortFrameworkIdentifier)' == 'xamarinios'">Xamarin.iOS</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.mac' OR '$(_ShortFrameworkIdentifier)' == 'xamarinmac'">Xamarin.Mac</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.tvos' OR '$(_ShortFrameworkIdentifier)' == 'xamarintvos'">Xamarin.TVOS</TargetFrameworkIdentifier>
    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'xamarin.watchos' OR '$(_ShortFrameworkIdentifier)' == 'xamarinwatchos'">Xamarin.WatchOS</TargetFrameworkIdentifier>

    <TargetFrameworkIdentifier Condition="'$(_ShortFrameworkIdentifier)' == 'tizen'">Tizen</TargetFrameworkIdentifier>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(TargetFrameworkVersion)' == '' AND '$(_ShortFrameworkVersion)' != '' AND $(_ShortFrameworkVersion.Contains('.'))">
      <!-- Versions with dots are taken as is -->
      <PropertyGroup>
        <TargetFrameworkVersion>$(_ShortFrameworkVersion)</TargetFrameworkVersion>
      </PropertyGroup>
    </When>

    <When Condition="'$(TargetFrameworkVersion)' == '' AND '$(_ShortFrameworkVersion)' != ''">
      <!-- Versions with no dots and up to 3 characters gets implicit dots between characters -->
      <PropertyGroup>
        <TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 1">$(_ShortFrameworkVersion[0]).0</TargetFrameworkVersion>
        <TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 2">$(_ShortFrameworkVersion[0]).$(_ShortFrameworkVersion[1])</TargetFrameworkVersion>
        <TargetFrameworkVersion Condition="$(_ShortFrameworkVersion.Length) == 3">$(_ShortFrameworkVersion[0]).$(_ShortFrameworkVersion[1]).$(_ShortFrameworkVersion[2])</TargetFrameworkVersion>
      </PropertyGroup>
    </When>

    <Otherwise>
      <PropertyGroup Condition="'$(TargetFrameworkVersion)' != ''">
        <TargetFrameworkVersion>$(TargetFrameworkVersion.TrimStart('vV'))</TargetFrameworkVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <Import Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" Project="$(MSBuildThisFileDirectory)FrameworkResolvers\MSBuild.NETFramework.targets"/>

  <!-- Support for resolving portable framework profiles -->
  <ImportGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable'">
    <Import Condition="'$(TargetFrameworkVersion)' == ''" Project="$(MSBuildThisFileDirectory)FrameworkResolvers\MSBuild.NETPortable.v*.targets"/>
    <Import Condition="'$(TargetFrameworkVersion)' != ''" Project="$(MSBuildThisFileDirectory)FrameworkResolvers\MSBuild.NETPortable.v$(TargetFrameworkVersion).targets"/>
  </ImportGroup>

  <PropertyGroup>
    <_TargetFrameworkVersionWithoutV>$(TargetFrameworkVersion)</_TargetFrameworkVersionWithoutV>
    <_TargetFrameworkVersionWithV>v$(TargetFrameworkVersion)</_TargetFrameworkVersionWithV>
    <TargetFrameworkVersion>$(_TargetFrameworkVersionWithV)</TargetFrameworkVersion>
  </PropertyGroup>

</Project>