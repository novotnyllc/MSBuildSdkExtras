<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Don't generate assembly info for generated projects -->
    <GenerateAssemblyInfo Condition="'$(IsGeneratedProject)' == 'true'">false</GenerateAssemblyInfo>
    <ImportProjectExtensionTargets Condition="'$(ImportProjectExtensionTargets)' == ''">true</ImportProjectExtensionTargets>
  </PropertyGroup>

  <!--
    WPF sometimes creates a temporary project, since it changes the peoject file, it breaks MSBuildProjectName and inturn RootNamespace.
    When that is the case we simply fix-up RootNamespace by removing the project generated suffix.
  -->
  <Target Name="_CheckAndFixupRootNamespaceWithGeneratedSuffix"
      BeforeTargets="_CompileTemporaryAssembly;CoreCompile"
      Condition="('$(IsGeneratedProject)' == 'true') AND $([System.Text.RegularExpressions.Regex]::IsMatch('$(RootNamespace)', '$(GeneratedProjectSuffixPattern)'))">
    <PropertyGroup>
      <_RootNamespaceInGeneratedProject>$(RootNamespace)</_RootNamespaceInGeneratedProject>
      <RootNamespace>$([System.Text.RegularExpressions.Regex]::Replace('$(_RootNamespaceInGeneratedProject)', '$(GeneratedProjectSuffixPattern)', ''))</RootNamespace>
    </PropertyGroup>
    <Message Importance="High" Text="The RootNamespace in the generated project was '$(_RootNamespaceInGeneratedProject)' and the fixed-up RootNamespace is $(RootNamespace)."/>
  </Target>

  <!--
    WPF sometimes creates a temporary project, since it changes the peoject file, it breaks Project Extensions import.
    In order to properly import Project Extensions, we need the user to set '_OriginalProjectFile' and use it to import Project Extensions.
  -->
  <ImportGroup Condition="'$(_OriginalProjectFile)' != '' AND '$(ImportProjectExtensionTargets)' == 'true'">
    <Import Project="$(_OriginalProjectExtensionsPath)$(_OriginalProjectFile).*.targets" Condition="Exists('$(_OriginalProjectExtensionsPath)')"/>
  </ImportGroup>

  <!--
    Workaround to fix IntelliSense file generation for XAML projects
    ISSUE: https://github.com/dotnet/project-system/issues/2488
  -->
  <Target Name="_DesignTimeBuildAndIntelliSenseWorkaround"
      AfterTargets="_CheckCompileDesignTimePrerequisite"
      Condition="'@(Page)' != ''">
    <PropertyGroup>
      <BuildingProject>false</BuildingProject>
    </PropertyGroup>
  </Target>

  <Target Name="IncludeWindowsLibraryLayoutItems"
      Condition="'$(GenerateLibraryLayout)' == 'true' AND '$(SDKIdentifier)' == 'Windows'"
      DependsOnTargets="PrepareLibraryLayout">
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(_LayoutFile)" PackagePath="lib\$(TargetFramework)\%(_LayoutFile.TargetPath)"/>
    </ItemGroup>
  </Target>

  <!-- Handle Library Layout in NuGet packages -->
  <PropertyGroup>
    <TargetsForTfmSpecificContentInPackage Condition="'$(SkipWindowsLibraryLayout)' != 'true'">$(TargetsForTfmSpecificContentInPackage);IncludeWindowsLibraryLayoutItems</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <!--
    Detect the SDK version. For now, we have to check the NETCoreSdkVersion
    else check BundledNETCoreAppTargetFrameworkVersion property for Sdk <= 2.1.300
    else Give 1.0 version since that property doesn't exist in 1.x Sdks
  -->
  <PropertyGroup>
    <_NETCoreSdkVersion>$(NETCoreSdkVersion)</_NETCoreSdkVersion>
    <!--  Handle SemVer version like 2.1.300-preview, since MSBuild doesn't compare versions with alpha-numeric chars! -->
    <_NETCoreSdkVersion Condition="$(_NETCoreSdkVersion.Contains('-'))">$(_NETCoreSdkVersion.Split('-')[0])</_NETCoreSdkVersion>
    <_NETCoreSdkVersion Condition="'$(_NETCoreSdkVersion)' == ''">$(BundledNETCoreAppTargetFrameworkVersion)</_NETCoreSdkVersion>
    <_NETCoreSdkVersion Condition="'$(_NETCoreSdkVersion)' == ''">1.0</_NETCoreSdkVersion>
  </PropertyGroup>

  <!--
    Workaround for bug in Microsoft.NET.Sdk < v2.0 where satellites were deployed on top of each other in root.
    ISSUE: https://github.com/dotnet/sdk/issues/1360
  -->
  <Target Name="SatelliteDeploymentOldSdkWorkaround"
      AfterTargets="ResolveLockFileCopyLocalProjectDeps"
      Condition="'$(_NETCoreSdkVersion)' &lt; '2.0' AND '$(IsMultiTargetingBuild)' != 'true'">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ResourceCopyLocalItems)"/>
      <ReferenceCopyLocalPaths Include="@(ResourceCopyLocalItems)" Condition="'@(ResourceCopyLocalItems)' != ''">
        <DestinationSubDirectory>$([System.IO.Directory]::GetParent(%(ResourceCopyLocalItems.FullPath)).Name)\</DestinationSubDirectory>
      </ReferenceCopyLocalPaths>
    </ItemGroup>
  </Target>

  <!-- By default we suppress the old sdk warning, if the user has loaded v4.3.0+ NuGet 'Pack' target, which contain some fixes around PRI files. -->
  <PropertyGroup Condition="'$(_NETCoreSdkVersion)' &lt; '2.0'">
    <PackDependsOn>WarnWhenUsingOldSdk;$(PackDependsOn)</PackDependsOn>
    <SuppressOldSdkWarning Condition="'$(SuppressOldSdkWarning)' == '' AND '$(ImportNuGetBuildTasksPackTargetsFromSdk)' == 'false'">true</SuppressOldSdkWarning>
  </PropertyGroup>

  <!-- Check to see if we are on an Old SDK and warn the user about 'Pack' target! -->
  <Target Name="WarnWhenUsingOldSdk" Condition="'$(_NETCoreSdkVersion)' &lt; '2.0' AND '$(SuppressOldSdkWarning)' != 'true'">
    <Warning Text="There are known issues using the 'Pack' target that comes with the v1 SDKs. Update to v2 and above SDKs to use the fixed 'Pack' target. If you don't need the fixed 'Pack' target the set 'SuppressOldSdkWarning' property to 'true'. If you need to use the v1 SDKs and to use the 'Pack' target, then add a 'NuGet.Build.Tasks.Pack' v4.3.0 and above, as a dependency to proceed."/>
  </Target>

</Project>